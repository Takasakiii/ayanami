// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Takasakiii/ayanami/internal/file"
	"github.com/Takasakiii/ayanami/internal/file/repository"
	"github.com/Takasakiii/ayanami/internal/file/service"
	"github.com/Takasakiii/ayanami/pkg/config"
	"github.com/Takasakiii/ayanami/pkg/cuid"
	"github.com/Takasakiii/ayanami/pkg/database"
	"github.com/Takasakiii/ayanami/pkg/sender"
	"github.com/Takasakiii/ayanami/pkg/server"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig := config.GetConfig()
	s3Sender, err := sender.NewS3Sender(configConfig)
	if err != nil {
		return nil, err
	}
	cuidCuid, err := cuid.NewCuid()
	if err != nil {
		return nil, err
	}
	gormDatabase := database.NewGormDatabase(configConfig)
	fileRepository := repository.NewFileRepository(gormDatabase)
	fileService := service.NewService(configConfig, s3Sender, cuidCuid, s3Sender, fileRepository)
	serverServer := server.NewServer(configConfig, fileService)
	app := newApp(serverServer, gormDatabase)
	return app, nil
}

// wire.go:

type App struct {
	webServer *server.Server
	db        database.Database
}

var configSet = wire.NewSet(config.GetConfig)

var senderSet = wire.NewSet(
	configSet, sender.NewS3Sender, wire.Bind(new(sender.Sender), new(*sender.S3Sender)), wire.Bind(new(sender.Downloader), new(*sender.S3Sender)))

var databaseSet = wire.NewSet(database.NewGormDatabase, wire.Bind(new(database.Database), new(*database.GormDatabase)))

var fileRepositorySet = wire.NewSet(
	databaseSet, repository.NewFileRepository, wire.Bind(new(file.Repository), new(*repository.FileRepository)))

var cuidSet = wire.NewSet(cuid.NewCuid, wire.Bind(new(cuid.Generator), new(*cuid.Cuid)))

var fileServiceSet = wire.NewSet(
	senderSet,
	cuidSet,
	fileRepositorySet, service.NewService, wire.Bind(new(file.Service), new(*service.FileService)))

var webServerSet = wire.NewSet(fileServiceSet, server.NewServer)

func newApp(webServer *server.Server, db database.Database) *App {
	return &App{
		webServer: webServer,
		db:        db,
	}
}
